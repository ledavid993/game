/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    games: Game;
    'game-players': GamePlayer;
    'player-registry': PlayerRegistry;
    votes: Vote;
    'player-votes': PlayerVote;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    games: GamesSelect<false> | GamesSelect<true>;
    'game-players': GamePlayersSelect<false> | GamePlayersSelect<true>;
    'player-registry': PlayerRegistrySelect<false> | PlayerRegistrySelect<true>;
    votes: VotesSelect<false> | VotesSelect<true>;
    'player-votes': PlayerVotesSelect<false> | PlayerVotesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "games".
 */
export interface Game {
  id: number;
  code: string;
  status?: ('lobby' | 'active' | 'completed' | 'cancelled') | null;
  hostSocketId?: string | null;
  hostDisplayName?: string | null;
  settings: {
    cooldownMinutes: number;
    /**
     * Maximum number of players allowed in the game (1-1000)
     */
    maxPlayers: number;
    murdererCount: number;
  };
  startedAt?: string | null;
  endedAt?: string | null;
  killEvents?:
    | {
        eventId: string;
        murdererName?: string | null;
        victimName?: string | null;
        timestamp: string;
        message?: string | null;
        successful?: boolean | null;
        id?: string | null;
      }[]
    | null;
  summary?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "game-players".
 */
export interface GamePlayer {
  id: number;
  game: number | Game;
  /**
   * Reference to the player in the registry
   */
  player: number | PlayerRegistry;
  joinedAt?: string | null;
  /**
   * Unique code for this player in this specific game session
   */
  playerCode: string;
  role?: ('civilian' | 'murderer' | 'reviver' | 'detective' | 'bodyguard' | 'nurse' | 'vigilante' | 'doctor') | null;
  isAlive?: boolean | null;
  deviceType?: ('unknown' | 'mobile' | 'desktop' | 'tv') | null;
  socketId?: string | null;
  cooldownExpiresAt?: string | null;
  lastKillAt?: string | null;
  kills?: number | null;
  /**
   * Number of times this player can still reveal their card (flip it back to mystery)
   */
  cardRevealsRemaining?: number | null;
  /**
   * Whether the card is currently showing the role (true) or mystery side (false)
   */
  isCardRevealed?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Persistent registry of all players that can be added to games
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "player-registry".
 */
export interface PlayerRegistry {
  id: number;
  /**
   * Full name of the player
   */
  displayName: string;
  /**
   * Unique username for the player (e.g., MysticRaven)
   */
  username: string;
  /**
   * Unique player code for game access
   */
  playerCode: string;
  /**
   * Optional phone number for notifications
   */
  phone?: string | null;
  /**
   * Optional email address for notifications
   */
  email?: string | null;
  /**
   * Whether this player is available for games
   */
  isActive?: boolean | null;
  /**
   * Total number of games this player has participated in
   */
  gamesPlayed?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "votes".
 */
export interface Vote {
  id: number;
  /**
   * Derived automatically from the targeted game session player
   */
  game: number | Game;
  /**
   * Player in this game session receiving the vote
   */
  target: number | GamePlayer;
  count?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "player-votes".
 */
export interface PlayerVote {
  id: number;
  /**
   * Derived automatically from the voter game session player
   */
  game: number | Game;
  /**
   * Player who cast the vote
   */
  voter: number | GamePlayer;
  /**
   * Player receiving the vote
   */
  target: number | GamePlayer;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'games';
        value: number | Game;
      } | null)
    | ({
        relationTo: 'game-players';
        value: number | GamePlayer;
      } | null)
    | ({
        relationTo: 'player-registry';
        value: number | PlayerRegistry;
      } | null)
    | ({
        relationTo: 'votes';
        value: number | Vote;
      } | null)
    | ({
        relationTo: 'player-votes';
        value: number | PlayerVote;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "games_select".
 */
export interface GamesSelect<T extends boolean = true> {
  code?: T;
  status?: T;
  hostSocketId?: T;
  hostDisplayName?: T;
  settings?:
    | T
    | {
        cooldownMinutes?: T;
        maxPlayers?: T;
        murdererCount?: T;
      };
  startedAt?: T;
  endedAt?: T;
  killEvents?:
    | T
    | {
        eventId?: T;
        murdererName?: T;
        victimName?: T;
        timestamp?: T;
        message?: T;
        successful?: T;
        id?: T;
      };
  summary?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "game-players_select".
 */
export interface GamePlayersSelect<T extends boolean = true> {
  game?: T;
  player?: T;
  joinedAt?: T;
  playerCode?: T;
  role?: T;
  isAlive?: T;
  deviceType?: T;
  socketId?: T;
  cooldownExpiresAt?: T;
  lastKillAt?: T;
  kills?: T;
  cardRevealsRemaining?: T;
  isCardRevealed?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "player-registry_select".
 */
export interface PlayerRegistrySelect<T extends boolean = true> {
  displayName?: T;
  username?: T;
  playerCode?: T;
  phone?: T;
  email?: T;
  isActive?: T;
  gamesPlayed?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "votes_select".
 */
export interface VotesSelect<T extends boolean = true> {
  game?: T;
  target?: T;
  count?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "player-votes_select".
 */
export interface PlayerVotesSelect<T extends boolean = true> {
  game?: T;
  voter?: T;
  target?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}